services:
  db:
    image: postgres:15-alpine
    container_name: truck-postgres-prod
    environment:
      - POSTGRES_DB=truck_api_db
      - POSTGRES_USER=truck_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - truck-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U truck_user -d truck_api_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: truck-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - truck-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    build: 
      context: ./
      dockerfile: Dockerfile
    container_name: truck-django-prod
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...' &&
        while ! nc -z db 5432; do sleep 1; done &&
        echo 'PostgreSQL is ready!' &&
        python manage.py collectstatic --noinput &&
        python manage.py migrate &&
        gunicorn project.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120
      "
    volumes:
      - static_volume:/usr/src/app/static
      - media_volume:/usr/src/app/media
    expose:
      - "8000"
    networks:
      - truck-network
    restart: unless-stopped
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: truck-nginx-prod
    volumes:
      - static_volume:/static
      - media_volume:/media
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - truck-network
    restart: unless-stopped
    depends_on:
      web:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  truck-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local